# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ...core.unchecked_base_model import UncheckedBaseModel
import typing
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
import typing_extensions
from ...core.unchecked_base_model import UnionMetadata


class PatchConvAiDashboardSettingsRequestChartsItem_CallSuccess(UncheckedBaseModel):
    type: typing.Literal["call_success"] = "call_success"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PatchConvAiDashboardSettingsRequestChartsItem_Criteria(UncheckedBaseModel):
    type: typing.Literal["criteria"] = "criteria"
    name: str
    criteria_id: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


PatchConvAiDashboardSettingsRequestChartsItem = typing_extensions.Annotated[
    typing.Union[
        PatchConvAiDashboardSettingsRequestChartsItem_CallSuccess,
        PatchConvAiDashboardSettingsRequestChartsItem_Criteria,
    ],
    UnionMetadata(discriminant="type"),
]
